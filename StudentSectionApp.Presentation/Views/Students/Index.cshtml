@model IEnumerable<StudentSectionApp.Application.DTOs.StudentDto>

@{
    ViewData["Title"] = "Students";
}

<h1>Students</h1>

<style>
    .table {
        margin-top: 20px;
    }

    .table th,
    .table td {
        text-align: center;
        vertical-align: middle;
    }

    .btn {
        margin: 2px;
    }
</style>

<p>
    <a asp-action="Create" class="btn btn-primary">Create New</a>
</p>

<form method="post" asp-controller="Student" asp-action="Index">
    @Html.AntiForgeryToken()
</form>

<table class="table table-striped table-hover table-bordered">
    <thead class="thead-dark">
        <tr>
            <th>Name</th>
            <th>Age</th>
            <th>Email</th>
            <th>Address</th>
            <th>PhoneNumber</th>
            @* <th>EnrollmentDate</th> *@
            <th>Section Name</th>
            <th>Action</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var student in Model)
        {
            <tr id="student-@student.Id">
                <td>@student.Name</td>
                <td>@student.Age</td>
                <td>@student.Email</td>
                <td>@student.Address</td>
                <td>@student.PhoneNumber</td>
                @* <td>@student.EnrollmentDate.ToString("yyyy-MM-dd")</td> *@
                <td>@student.SectionName</td>
                <td>
                    <button class="btn btn-warning btn-sm edit-button" data-id="@student.Id">Edit</button>
                    <button class="btn btn-danger btn-sm" onclick="deleteStudent('@student.Id')">Delete</button>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Edit Modal -->
<div class="modal fade" id="editModal" tabindex="-1" role="dialog" aria-labelledby="editModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel">Edit Student</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form id="editForm">
                    <div class="form-group">
                        <label for="Name">Name</label>
                        <input type="text" class="form-control" id="Name" name="Name" required>
                    </div>
                    <div class="form-group">
                        <label for="Age">Age</label>
                        <input type="number" class="form-control" id="Age" name="Age" required>
                    </div>
                    <div class="form-group">
                        <label for="Email">Email</label>
                        <input type="email" class="form-control" id="Email" name="Email" required>
                    </div>
                    <div class="form-group">
                        <label for="Address">Address</label>
                        <input type="text" class="form-control" id="Address" name="Address" required>
                    </div>
                    <div class="form-group">
                        <label for="PhoneNumber">Phone Number</label>
                        <input type="text" class="form-control" id="PhoneNumber" name="PhoneNumber" required>
                    </div>
                    <div class="form-group">
                        <label for="SectionName">Section Name</label>
                        <input type="text" class="form-control" id="SectionName" name="SectionName" required>
                    </div>
                    <input type="hidden" id="Id" name="Id">
                    <button type="submit" class="btn btn-primary">Save changes</button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
    <script>
 $(document).ready(function () {
    $('.edit-button').click(function () {
        var studentId = $(this).data('id');
        $.ajax({
            url: '@Url.Action("Edit", "Student")/' + studentId,
            type: 'GET',
            success: function (data) {
                $('#Id').val(data.id);
                $('#Name').val(data.name);
                $('#Age').val(data.age);
                $('#Email').val(data.email);
                $('#Address').val(data.address);
                $('#PhoneNumber').val(data.phoneNumber);
                $('#SectionName').val(data.sectionName);
                $('#editModal').modal('show');
            },
            error: function (xhr, status, error) {
                console.error("Error fetching student data: ", status, error);
                console.error("Response: ", xhr.responseText);
                alert('An error occurred while fetching student data.');
            }
        });
    });

    $('#editForm').submit(function (event) {
        event.preventDefault();
        var formData = $(this).serialize();
        console.log("Form Data: ", formData); // Log the form data
        $.ajax({
            url: '@Url.Action("Edit", "Student")',
            type: 'POST',
            data: formData,
            headers: {
                'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
            },
            success: function (data) {
                console.log("Server Response: ", data); // Log the server response
                if (data.success) {
                    // Update the student row in the table
                    var studentRow = $('#student-' + data.student.id);
                    studentRow.find('td:eq(0)').text(data.student.name);
                    studentRow.find('td:eq(1)').text(data.student.age);
                    studentRow.find('td:eq(2)').text(data.student.email);
                    studentRow.find('td:eq(3)').text(data.student.address);
                    studentRow.find('td:eq(4)').text(data.student.phoneNumber);
                    studentRow.find('td:eq(5)').text(data.student.sectionName);
                    $('#editModal').modal('hide');
                } else {
                    alert(data.message);
                    if (data.errors) {
                        console.log('Validation errors:', data.errors);
                    }
                }
            },
            error: function (xhr, status, error) {
                console.error("Error Status: ", status); // Log the error status
                console.error("Error: ", error); // Log the error
                console.error("Response: ", xhr.responseText); // Log the response text
                alert('An error occurred: ' + xhr.responseText);
            }
        });
    });
});
        function deleteStudent(id) {
            if (confirm('Are you sure you want to delete this student?')) {
                const token = document.querySelector('input[name="__RequestVerificationToken"]').value;
                fetch(`/Student/DeleteConfirmed/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': token
                    }
                })
                    .then(response => {
                        if (response.ok) {
                            document.getElementById(`student-${id}`).remove();
                        } else {
                            return response.text().then(text => { throw new Error(text) });
                        }
                    })
                    .catch(error => alert(error.message));
            }
        }
    </script>
}